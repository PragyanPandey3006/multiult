Metadata-Version: 2.4
Name: Telethon
Version: 1.38.1
Summary: Full-featured Telegram client library for Python 3
Home-page: https://github.com/LonamiWebs/Telethon
Download-URL: https://github.com/LonamiWebs/Telethon/releases
Author: Lonami Exo
Author-email: totufals@hotmail.com
License: MIT
Keywords: telegram api chat client library messaging mtproto
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Topic :: Communications :: Chat
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Requires-Python: >=3.5
License-File: LICENSE
Requires-Dist: pyaes
Requires-Dist: rsa
Provides-Extra: cryptg
Requires-Dist: cryptg; extra == "cryptg"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: download-url
Dynamic: home-page
Dynamic: keywords
Dynamic: license
Dynamic: license-file
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

Telethon
========
.. epigraph::

  ⭐️ Thanks **everyone** who has starred the project, it means a lot!
      ~ PLEASE Respect the ongoing work provided by both ToxygenX and ufoptg, 
        we'd also like to remind you to not forget the continued support from New-dev0.

|logo| **Telethon** is an asyncio_ **Python 3**
MTProto_ library to interact with Telegram_'s API
as a user or through a bot account (bot API alternative).

.. important::

    If you have code using Telethon before its 1.0 version, you must
    read `Compatibility and Convenience`_ to learn how to migrate.
    As with any third-party library for Telegram, be careful not to
    break `Telegram's ToS`_ or `Telegram can ban the account`_.

What is this?
-------------

Telegram is a popular messaging application. This library is meant
to make it easy for you to write Python programs that can interact
with Telegram. Think of it as a wrapper that has already done the
heavy job for you, so you can focus on developing an application.


Installing
----------

.. code-block:: sh

  pip3 install telethon


Creating a client
-----------------

.. code-block:: python

    from telethon import TelegramClient, events, sync

    # These example values won't work. You must get your own api_id and
    # api_hash from https://my.telegram.org, under API Development.
    api_id = 12345
    api_hash = '0123456789abcdef0123456789abcdef'

    client = TelegramClient('session_name', api_id, api_hash)
    client.start()


Doing stuff
-----------

.. code-block:: python

    print(client.get_me().stringify())

    client.send_message('username', 'Hello! Talking to you from Telethon')
    client.send_file('username', '/home/myself/Pictures/holidays.jpg')

    client.download_profile_photo('me')
    messages = client.get_messages('username')
    messages[0].download_media()

    @client.on(events.NewMessage(pattern='(?i)hi|hello'))
    async def handler(event):
        await event.respond('Hey!')


Next steps
----------

Do you like how Telethon looks? Check out `Read The Docs`_ for a more
in-depth explanation, with examples, troubleshooting issues, and more
useful information.

.. _asyncio: https://docs.python.org/3/library/asyncio.html
.. _MTProto: https://core.telegram.org/mtproto
.. _Telegram: https://telegram.org
.. _Compatibility and Convenience: https://docs.telethon.dev/en/stable/misc/compatibility-and-convenience.html
.. _Telegram's ToS: https://core.telegram.org/api/terms
.. _Telegram can ban the account: https://docs.telethon.dev/en/stable/quick-references/faq.html#my-account-was-deleted-limited-when-using-the-library
.. _Read The Docs: https://docs.telethon.dev

.. |logo| image:: logo.svg
    :width: 24pt
    :height: 24pt

Audio File Attributes
---------------

.. code-block:: python

    from telethon.tl.types import InputPeerSelf, InputMediaUploadedDocument

    msg_media = await event.client.upload_file(file_path)
    thumbnail_file = await event.client.upload_file(thumb_path)

    # Define audio attributes (you can leave it empty if not needed)
    audio_attributes = []

    # Create an input media object with the audio file and thumbnail
    input_media = InputMediaUploadedDocument(
        file=msg_media,              # Audio file
        mime_type='audio/mpeg',      # Mime type of the audio file
        attributes=audio_attributes, # Audio attributes (empty list if not needed)
        thumb=thumbnail_file         # Thumbnail file
    )

    # Create an input media object with a Spoiler
    input_media = InputMediaUploadedDocument(
        file=msg_media,              # Audio file
        mime_type='audio/mpeg',      # Mime type of the audio file
        attributes=audio_attributes, # Audio attributes (empty list if not needed)
        thumb=thumbnail_file         # Thumbnail file
    )

    # Upload the media
    file = await event.client(UploadMediaRequest(
        InputPeerSelf(),  # Upload to self
        media=input_media # Input media object
    ))


Media File Attributes
---------------

.. code-block:: python

    from telethon.tl.types import InputMediaUploadedDocument, DocumentAttributeImageSize, DocumentAttributeHasSpoiler

    # Upload the image file
    uploaded_image = await client.upload_file("path/to/your/image.jpg")

    # Image attributes: size of the image
    image_attributes = [
        DocumentAttributeImageSize(w=1024, h=768),  # Replace with the actual dimensions of your image
        DocumentAttributeHasSpoiler()               # Add the spoiler attribute
    ]

    # Send the image as a document with the spoiler effect
    await client.send_file(
        chat,
        InputMediaUploadedDocument(
            file=uploaded_image,              # Uploaded image file
            mime_type='image/jpeg',           # Mime type of the image file
            attributes=image_attributes,      # Image attributes (including the spoiler)
            thumb=thumbnail_file              # Optional thumbnail file
        )
    )



Sending Message as Chunks (When message exceeds 4096)
---------------

.. code-block:: python

    # Example message that might exceed Telegram's length limits
    long_message = "Your long message here, potentially thousands of characters..." * 100

    async def main():
        # Connect to Telegram
        await client.start()
        
        # The entity to send the message to (could be a username, user ID, or group ID)
        entity = 'username_or_id_here'
        
        # Send the message in chunks if it exceeds the max length
        await client.send_message_chunks(entity, long_message, max_length=4096)

    # Run the main function in the event loop
    with client:
        client.loop.run_until_complete(main())
